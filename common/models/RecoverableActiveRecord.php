<?php

namespace common\models;

use common\models\query\UndeleteableActiveQuery;
use yii\base\InvalidConfigException;
use yii\base\ModelEvent;
use yii\db\ActiveRecord;
use Yii;

/**
 * Class RecoverableActiveRecord
 * @package common\models
 *
 */
class RecoverableActiveRecord extends UndeleteableActiveRecord
{

    const EVENT_AFTER_RECOVER = 'afterRecover';
    const EVENT_BEFORE_RECOVER = 'beforeRecover';

    public $recoverStatus;

    /**
     * @inheritdoc
     */
    public function init()
    {
        if (empty($this->recoverStatus))
            throw new InvalidConfigException('Identify member $recoverStatus of the ' . get_called_class());
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Changes status of record to STATUS_COMPLETED
     *
     * @return bool
     */
    public function recover()
    {
        $res = false;
        if ($this->beforeRecover()) {
            $this->off(ActiveRecord::EVENT_BEFORE_UPDATE);
            $this->off(ActiveRecord::EVENT_AFTER_UPDATE);
            $this->status = $this->recoverStatus;
            if ($this->save(false)) {
                $res = $this->afterRecover();
            }
        }

        return $res;
    }

    public function afterRecover()
    {
        $event = new ModelEvent;
        $this->trigger(self::EVENT_AFTER_RECOVER, $event);
        return $event->isValid;
    }

    public function beforeRecover()
    {
        $event = new ModelEvent;
        $this->trigger(self::EVENT_BEFORE_RECOVER, $event);
        return $event->isValid;
    }

    public function isRecoverable(){
        return true;
    }

}
